# 三色旗
"""
假设有一条绳子，上面有红、白、蓝三种颜色的旗子。
开始时绳子上旗子的颜色并没有顺序，现在要对旗子进行分类，并按照蓝、白、红的顺序排列。
需要注意的是只能在绳子上进行移动，并且一次只能调换两个旗子，则如何移动才能使旗子移动的次数最少。
"""
# 由问题描述可知，只在一条绳子上移动，而且一次只能调换两个旗子，因此只要保证在移动旗子时，
# 从绳子的开头开始，遇到蓝色的旗子向前移，遇到白色的旗子留在中间，而遇到红色的旗子则向后移。
# 如果要让移动次数最少，则可以使用三个标记b、w、r来分别标记蓝旗、白旗和红旗。

# 交换
def swap(i,j,arr):
    temp = arr[i]
    arr[i] = arr[j]
    arr[j] = temp

def solve():
    arr = ['R', 'W', 'B', 'W', 'W', 'B', 'R', 'B', 'W', 'R'] # 定义字符数组
    w = b = 0
    r = len(arr)-1

    # 打印移动前绳子上的颜色
    for i in range(len(arr)):
        print(arr[i], end=' ')
    print()

    # 移动过程
    while w <= r:
        # 遇到的是白旗
        if arr[w] == 'W':
            w += 1 # 白旗指针自增1
        # 遇到的是蓝旗
        elif arr[w] == 'B':
            swap(b, w, arr)
            b += 1 # 蓝旗指针自增1
            w += 1 # 白旗指针自增1
        # 遇到的是红旗
        else:
            # 移动红旗指针使其指向当前最靠前的非红旗位置
            while w < r and arr[r] == 'R':
                r -= 1 # 红旗指针自减1
            swap(r, w, arr) # 交换红旗指针和白旗指针
            r -= 1 # 红旗指针自减1
    
    # 打印移动后绳子上旗子的颜色
    for i in range(len(arr)):
        print(arr[i], end=' ')
    print()

if __name__ == '__main__':
    solve()

